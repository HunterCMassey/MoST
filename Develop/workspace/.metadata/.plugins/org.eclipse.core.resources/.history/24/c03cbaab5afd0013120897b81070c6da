package visual;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.List;

import visual.GraphPanel;

/**
 * ***********************************************
 * Class Node
 * ***********************************************
 * Description: A node in the graph. Each node represents a movement that has a start and end posture.
 * Movements can also be durational - meaning that they can be done for an indefinite period of time, e.g. sitting or walking.
 * Durational movements can be transitional - meaning that there must be a transition to get from basic starting posture
 * to the durational action and another transition to reach the ending posture, e.g. kneeling or using a phone 
 * 
 * *************
 * Constructors:
 * public Node(Point p, int r, Color color, String nome, String startPos, String endPos)
 * public Node(Point p, int r, Color color, String nome, String startPos, String endPos, boolean duration, boolean trans)
 * *************
 * 
 * Methods:
 * 
 */
public static class Node extends GraphPanel
{
	private Point p;
	private static int r;
	private Color color;
	private boolean selected = false;
	private Rectangle b = new Rectangle();
	private String name;
	private String startPosture;
	private String endPosture;
	private boolean hasDuration;
	private boolean transitional;

	public Node(Point p, int r, Color color, String nome, String startPos, String endPos)
	{
		this.p = p;
		this.setR(r);
		this.color = color;
		name = nome;
		setBoundary(b);
		startPosture = startPos;
		endPosture = endPos;
	}

	public Node(Point p, int r, Color color, String nome, String startPos, String endPos, boolean duration, boolean trans)
	{
		this.p = p;
		this.setR(r);
		this.color = color;
		name = nome;
		setBoundary(b);
		startPosture = startPos;
		endPosture = endPos;
		hasDuration = duration;
		transitional = trans;
	}

	public boolean hasDurationalProperty() {
		return hasDuration;
	}
	
	public boolean isTransitional(){
		return transitional;
	}

	public String getStartPosture() {
		return startPosture;
	}

	public String getEndPosture() {
		return endPosture;
	}

	public String getName() {
		return name;
	}

	/**
	 * Calculate this node's rectangular boundary.
	 */
	private void setBoundary(Rectangle b) {
		b.setBounds(p.x - getR(), p.y - getR(), 2 * getR(), 2 * getR());
	}

	/**
	 * Draw this node.
	 */
	public void draw(Graphics g) {
		g.setColor(Color.black);
		g.drawString(name, b.x, b.y);
		if(posturesVisible)
			g.drawString(startPosture+" , "+endPosture,b.x,b.y+b.height+r);
		g.setColor(this.color);
		g.fillOval(b.x, b.y, b.width, b.height);
		g.setColor(Color.black);
		g.drawOval(b.x, b.y, b.width, b.height);
		if (selected)
		{
			g.setColor(Color.red); //was darkGray
			g.fillOval(b.x, b.y, b.width, b.height);
			g.setColor(Color.black);
			g.drawOval(b.x, b.y, b.width, b.height);
		}
	}

	/**
	 * Return this node's location.
	 */
	public Point getLocation() {
		return p;
	}

	/**
	 * Return true if this node contains p.
	 */
	public boolean contains(Point p) {
		return b.contains(p);
	}

	/**
	 * Return true if this node is selected.
	 */
	public boolean isSelected() {
		return selected;
	}

	/**
	 * Mark this node as selected.
	 */
	public void setSelected(boolean selected) {
		this.selected = selected;
	}

	/**
	 * Collected all the selected nodes in list.
	 */
	public static void getSelected(List<Node> list, List<Node> selected) {
		selected.clear();
		for (Node n : list)
		{
			if (n.isSelected())
			{
				selected.add(n);
			}
		}
	}

	/**
	 * Select no nodes.
	 */
	public static void selectNone(List<Node> list) {
		for (Node n : list)
		{
			n.setSelected(false);
		}
	}

	/**
	 * Select a single node; return true if not already selected.
	 */
	public static boolean selectOne(List<Node> list, Point p) {
		for (Node n : list)
		{
			if (n.contains(p))
			{
				if (!n.isSelected())
				{
					Node.selectNone(list);
					n.setSelected(true);
				}
				return true;
			}
		}
		return false;
	}

	/**
	 * Select each node in r.
	 */
	public static void selectRect(List<Node> list, Rectangle r) {
		for (Node n : list)
		{
			n.setSelected(r.contains(n.p));
		}
	}

	/**
	 * Toggle selected state of each node containing p.
	 */
	public static void selectToggle(List<Node> list, Point p) {
		for (Node n : list)
		{
			if (n.contains(p))
			{
				n.setSelected(!n.isSelected());
			}
		}
	}

	/**
	 * Update each node's position by d (delta).
	 */
	public static void updatePosition(List<Node> list, Point d) {
		for (Node n : list)
		{
			if (n.isSelected())
			{
				n.p.x += d.x;
				n.p.y += d.y;
				n.setBoundary(n.b);
			}
		}
	}

	/**
	 * Update each node's radius r.
	 */
	public static void updateRadius(List<Node> list, int r) {
		for (Node n : list)
		{
			if (n.isSelected())
			{
				n.setR(r);
				n.setBoundary(n.b);
			}
		}
	}

	/**
	 * Update each node's color.
	 */
	public static void updateColor(List<Node> list, Color color) {
		for (Node n : list)
		{
			if (n.isSelected())
			{
				n.color = color;
			}
		}
	}

	public static int getR() {
		return r;
	}

	public void setR(int r) {
		Node.r = r;
	}
}